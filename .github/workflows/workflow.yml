# Documentation: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses
name: github_worflow
run-name: GitHub Workflow

env:
  ## Common environment variables
  # Service name (must be lowercase and not contain any spaces)
  SERVICE_NAME: ${{ vars.SERVICE_NAME }}

  ## Development environment variables
  # The URL that the service (dev) should be accessible at
  DEV_SERVICE_URL: ${{ vars.DEV_SERVICE_URL }}
  # The Kubernetes namespace that the service should be deployed to
  DEV_NAMESPACE: ${{ vars.DEV_NAMESPACE }}
  # Kube configuration
  DEV_KUBE_CONFIG: ${{ secrets.DEV_KUBE_CONFIG }}

  ## Production environment variables
  # The URL that the service (dev) should be accessible at
  PROD_SERVICE_URL: ${{ vars.PROD_SERVICE_URL }}
  # The Kubernetes namespace that the service should be deployed to
  PROD_NAMESPACE: ${{ vars.PROD_NAMESPACE }}
  # Kube configuration
  PROD_KUBE_CONFIG: ${{ secrets.DEV_KUBE_CONFIG }}

# Allow one concurrent deployment
concurrency:
  group: github_worflow
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - prod

  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  review:
    runs-on: ubuntu-latest
    if: ${{ vars.RUN_CICD == 'true' }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Lint Python app
        uses: swiss-ai-center/common-code/.github/actions/lint-python-app@main
        with:
          python-app-path: .

  release:
    needs: review
    runs-on: ubuntu-latest
    if: ${{ vars.RUN_CICD == 'true' && success() && (vars.DEPLOY_DEV == 'true' || vars.DEPLOY_PROD == 'true') }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Build and push Docker image to GitHub
        id: build-and-push-docker-image-to-github
        uses: swiss-ai-center/common-code/.github/actions/build-and-push-docker-image-to-github@main
        with:
          docker-registry-username: ${{ github.actor }}
          docker-registry-password: ${{ secrets.GITHUB_TOKEN }}
          docker-image-name: ${{ github.repository }}
          docker-image-context: .
    outputs:
      docker-image-tags: ${{ steps.build-and-push-docker-image-to-github.outputs.docker-image-tags }}

  deploy-dev:
    needs: release
    runs-on: ubuntu-latest
    if: ${{ vars.RUN_CICD == 'true' && success() && github.ref == 'refs/heads/main' && vars.DEPLOY_DEV == 'true' }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Get service Docker image SHA tag
        shell: bash
        run: |
          docker_image_tags=(${{ needs.release.outputs.docker-image-tags }})
          docker_image_sha_tag="${docker_image_tags[1]}"
          echo "SERVICE_DOCKER_IMAGE_SHA_TAG=$docker_image_sha_tag" >> "$GITHUB_ENV"

      - name: Prepare configuration files
        working-directory: kubernetes
        env:
          SERVICE_URL: ${{ env.DEV_SERVICE_URL }}
        run: |
          # Set service configuration (ConfigMap)
          yq ".metadata.name = \"${{ env.SERVICE_NAME }}-config\"" config-map.yml > new-config-map.yml && mv new-config-map.yml config-map.yml
          yq ".metadata.labels.app = \"${{ env.SERVICE_NAME}}\"" config-map.yml > new-config-map.yml && mv new-config-map.yml config-map.yml

          # Set service configuration (Ingress)
          yq ".metadata.name = \"${{ env.SERVICE_NAME}}-ingress\"" ingress.yml > new-ingress.yml && mv new-ingress.yml ingress.yml
          yq ".spec.rules[0].host = \"${SERVICE_URL#*://}\"" ingress.yml > new-ingress.yml && mv new-ingress.yml ingress.yml
          yq ".spec.rules[0].http.paths[0].backend.service.name = \"${{ env.SERVICE_NAME}}-service\"" ingress.yml > new-ingress.yml && mv new-ingress.yml ingress.yml
          yq ".spec.tls[0].hosts[0] = \"${SERVICE_URL#*://}\"" ingress.yml > new-ingress.yml && mv new-ingress.yml ingress.yml

          # Set service configuration (Service)
          yq ".metadata.name = \"${{ env.SERVICE_NAME}}-service\"" service.yml > new-service.yml && mv new-service.yml service.yml
          yq ".spec.selector.app = \"${{ env.SERVICE_NAME}}\"" service.yml > new-service.yml && mv new-service.yml service.yml

          # Set service configuration (StatefulSet)
          yq ".metadata.name = \"${{ env.SERVICE_NAME}}-stateful\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".metadata.labels.app = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.serviceName = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.selector.matchLabels.app = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.template.metadata.labels.app = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.template.spec.containers[0].name = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.template.spec.containers[0].image = \"${{ env.SERVICE_DOCKER_IMAGE_SHA_TAG }}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.template.spec.containers[0].envFrom[0].configMapRef.name = \"${{ env.SERVICE_NAME}}-config\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml

      - name: Deploy service on the Kubernetes cluster
        uses: swiss-ai-center/common-code/.github/actions/execute-command-on-kubernetes-cluster@main
        with:
          kube-config: ${{ env.DEV_KUBE_CONFIG }}
          kube-namespace: ${{ env.DEV_NAMESPACE }}
          kubectl-context: ./kubernetes
          kubectl-args: |
            apply \
              -f config-map.yml \
              -f stateful.yml \
              -f service.yml \
              -f ingress.yml

  deploy-prod:
    needs: release
    runs-on: ubuntu-latest
    if: ${{ vars.RUN_CICD == 'true' && success() && github.ref == 'refs/heads/prod' && vars.DEPLOY_PROD == 'true' }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Get service Docker image SHA tag
        shell: bash
        run: |
          docker_image_tags=(${{ needs.release.outputs.docker-image-tags }})
          docker_image_sha_tag="${docker_image_tags[1]}"
          echo "SERVICE_DOCKER_IMAGE_SHA_TAG=$docker_image_sha_tag" >> "$GITHUB_ENV"

      - name: Prepare configuration files
        working-directory: kubernetes
        env:
          SERVICE_URL: ${{ env.PROD_SERVICE_URL}}
        run: |
          # Set service configuration (ConfigMap)
          yq ".metadata.name = \"${{ env.SERVICE_NAME }}-config\"" config-map.yml > new-config-map.yml && mv new-config-map.yml config-map.yml
          yq ".metadata.labels.app = \"${{ env.SERVICE_NAME}}\"" config-map.yml > new-config-map.yml && mv new-config-map.yml config-map.yml

          # Set service configuration (Ingress)
          yq ".metadata.name = \"${{ env.SERVICE_NAME}}-ingress\"" ingress.yml > new-ingress.yml && mv new-ingress.yml ingress.yml
          yq ".spec.rules[0].host = \"${SERVICE_URL#*://}\"" ingress.yml > new-ingress.yml && mv new-ingress.yml ingress.yml
          yq ".spec.rules[0].http.paths[0].backend.service.name = \"${{ env.SERVICE_NAME}}-service\"" ingress.yml > new-ingress.yml && mv new-ingress.yml ingress.yml
          yq ".spec.tls[0].hosts[0] = \"${SERVICE_URL#*://}\"" ingress.yml > new-ingress.yml && mv new-ingress.yml ingress.yml

          # Set service configuration (Service)
          yq ".metadata.name = \"${{ env.SERVICE_NAME}}-service\"" service.yml > new-service.yml && mv new-service.yml service.yml
          yq ".spec.selector.app = \"${{ env.SERVICE_NAME}}\"" service.yml > new-service.yml && mv new-service.yml service.yml

          # Set service configuration (StatefulSet)
          yq ".metadata.name = \"${{ env.SERVICE_NAME}}-stateful\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".metadata.labels.app = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.serviceName = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.selector.matchLabels.app = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.template.metadata.labels.app = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.template.spec.containers[0].name = \"${{ env.SERVICE_NAME}}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.template.spec.containers[0].image = \"${{ env.SERVICE_DOCKER_IMAGE_SHA_TAG }}\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml
          yq ".spec.template.spec.containers[0].envFrom[0].configMapRef.name = \"${{ env.SERVICE_NAME}}-config\"" stateful.yml > new-stateful.yml && mv new-stateful.yml stateful.yml

      - name: Deploy service on the Kubernetes cluster
        uses: swiss-ai-center/common-code/.github/actions/execute-command-on-kubernetes-cluster@main
        with:
          kube-config: ${{ env.PROD_KUBE_CONFIG }}
          kube-namespace: ${{ env.PROD_NAMESPACE }}
          kubectl-context: ./kubernetes
          kubectl-args: |
            apply \
              -f config-map.yml \
              -f stateful.yml \
              -f service.yml \
              -f ingress.yml
